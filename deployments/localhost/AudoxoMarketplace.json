{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintlimit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_publicMint",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_mintPaused",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_revealed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Audoxo__AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Audoxo__TokenUriMustNotBeEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicMintIsPaused",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        }
      ],
      "name": "MarketItemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "createMarketItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "createMarketSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchItemsListed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct AudoxoMarketplace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchMarketItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct AudoxoMarketplace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchMyNFTs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct AudoxoMarketplace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListingProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintPauseStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintingsLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPauseState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPublicMintState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevealState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVipAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isVip",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mintToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintingLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toVip",
          "type": "address"
        }
      ],
      "name": "removeVip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toVip",
          "type": "address"
        }
      ],
      "name": "setVip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMintPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePublicMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_listingPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListingPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "updateMintLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toReset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "listingAmt",
          "type": "uint256"
        }
      ],
      "name": "updateUserLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vipAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawListingPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x51ef14eeaff9b3621a4b29ae46d2f9a865cd762ea113b2b0195dde6bdd313b71",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "5384109",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000040020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000040000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x008bf979720e3a18b494b84a6e923cd5510595d55d3acef64cbf68ebbf8ac046",
    "transactionHash": "0x51ef14eeaff9b3621a4b29ae46d2f9a865cd762ea113b2b0195dde6bdd313b71",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x51ef14eeaff9b3621a4b29ae46d2f9a865cd762ea113b2b0195dde6bdd313b71",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x008bf979720e3a18b494b84a6e923cd5510595d55d3acef64cbf68ebbf8ac046"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "5384109",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    false,
    false,
    false,
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "ad3af4f839a3ee5a9e376b772e7f67db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintlimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_publicMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_mintPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_revealed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Audoxo__AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Audoxo__TokenUriMustNotBeEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicMintIsPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"name\":\"MarketItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createMarketItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createMarketSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchItemsListed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct AudoxoMarketplace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchMarketItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct AudoxoMarketplace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchMyNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct AudoxoMarketplace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListingProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintingsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicMintState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevealState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVipAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintingLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toVip\",\"type\":\"address\"}],\"name\":\"removeVip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toVip\",\"type\":\"address\"}],\"name\":\"setVip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMintPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingPrice\",\"type\":\"uint256\"}],\"name\":\"updateListingPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"updateMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingAmt\",\"type\":\"uint256\"}],\"name\":\"updateUserLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vipAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawListingPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AudoxoMarketplace.sol\":\"AudoxoMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AudoxoMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nerror Audoxo__TokenUriMustNotBeEmpty();\\r\\nerror Audoxo__AlreadyMinted();\\r\\nerror PublicMintIsPaused();\\r\\n\\r\\ncontract AudoxoMarketplace is ERC721URIStorage, ReentrancyGuard, Ownable {\\r\\n  using Counters for Counters.Counter;\\r\\n  Counters.Counter private _tokenIds;\\r\\n  Counters.Counter private _listItemId;\\r\\n  Counters.Counter private _itemsSold;\\r\\n\\r\\n  uint256 listingPrice = 0.025 ether;\\r\\n  uint256 listingProceeds;\\r\\n  address[] public vipAddresses;\\r\\n  uint256 mintLimit;\\r\\n  string revealUri =\\r\\n    \\\"ipfs://bafybeif5gb5rcumc44uheaniihqjzdv2rqjxd2hlkmpowowtvgujfe7tui/revealMetadata.json\\\";\\r\\n  bool publicMint;\\r\\n  bool paused;\\r\\n  bool mintPaused;\\r\\n  bool revealed;\\r\\n\\r\\n  mapping(uint256 => MarketItem) private idToMarketItem;\\r\\n\\r\\n  // sellers to Proceeds\\r\\n  mapping(address => uint256) private sellerProceeds;\\r\\n\\r\\n  //tokenUri to already minted\\r\\n  mapping(string => bool) _audoxos;\\r\\n\\r\\n  //address to isVip\\r\\n  mapping(address => bool) public isVip;\\r\\n\\r\\n  //address to total mintings left\\r\\n  mapping(address => uint256) public mintingLeft;\\r\\n\\r\\n  struct MarketItem {\\r\\n    uint256 tokenId;\\r\\n    address payable seller;\\r\\n    address payable owner;\\r\\n    uint256 price;\\r\\n    bool sold;\\r\\n  }\\r\\n\\r\\n  event MarketItemCreated(\\r\\n    uint256 indexed tokenId,\\r\\n    address seller,\\r\\n    address owner,\\r\\n    uint256 price,\\r\\n    bool sold\\r\\n  );\\r\\n\\r\\n  modifier isPaused() {\\r\\n    require(!paused, \\\"Contract is Paused\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isMintPaused() {\\r\\n    require(!mintPaused, \\\"Minting is Paused\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    uint256 _mintlimit,\\r\\n    bool _paused,\\r\\n    bool _publicMint,\\r\\n    bool _mintPaused,\\r\\n    bool _revealed\\r\\n  ) ERC721(\\\"Audoxo\\\", \\\"ADXO\\\") {\\r\\n    mintLimit = _mintlimit;\\r\\n    paused = _paused;\\r\\n    publicMint = _publicMint;\\r\\n    isVip[msg.sender] = true;\\r\\n    mintPaused = _mintPaused;\\r\\n    revealed = _revealed;\\r\\n  }\\r\\n\\r\\n  /* Updates the listing price of the contract */\\r\\n  function updateListingPrice(uint256 _listingPrice) public payable onlyOwner {\\r\\n    listingPrice = _listingPrice;\\r\\n  }\\r\\n\\r\\n  /* Mints a token in the marketplace */\\r\\n  function mintToken(string memory _tokenURI)\\r\\n    public\\r\\n    payable\\r\\n    isPaused\\r\\n    isMintPaused\\r\\n    returns (uint256)\\r\\n  {\\r\\n    if (bytes(_tokenURI).length <= 0) {\\r\\n      revert Audoxo__TokenUriMustNotBeEmpty();\\r\\n    }\\r\\n    if (_audoxos[_tokenURI]) {\\r\\n      revert Audoxo__AlreadyMinted();\\r\\n    }\\r\\n\\r\\n    if (!isVip[msg.sender]) {\\r\\n      if (publicMint) {\\r\\n        require(\\r\\n          !(mintingLeft[msg.sender] >= mintLimit),\\r\\n          \\\"Minting limit exeeded!\\\"\\r\\n        );\\r\\n        mintingLeft[msg.sender] += 1;\\r\\n      } else {\\r\\n        revert PublicMintIsPaused();\\r\\n      }\\r\\n    }\\r\\n\\r\\n    _audoxos[_tokenURI] = true;\\r\\n\\r\\n    _tokenIds.increment();\\r\\n    uint256 newTokenId = _tokenIds.current();\\r\\n\\r\\n    _mint(msg.sender, newTokenId);\\r\\n    _setTokenURI(newTokenId, _tokenURI);\\r\\n\\r\\n    idToMarketItem[newTokenId] = MarketItem(\\r\\n      newTokenId,\\r\\n      payable(address(0)),\\r\\n      payable(msg.sender),\\r\\n      0,\\r\\n      false\\r\\n    );\\r\\n\\r\\n    emit MarketItemCreated(newTokenId, address(0), msg.sender, 0, false);\\r\\n\\r\\n    return newTokenId;\\r\\n  }\\r\\n\\r\\n  function createMarketItem(uint256 tokenId, uint256 price)\\r\\n    public\\r\\n    payable\\r\\n    isPaused\\r\\n  {\\r\\n    require(price > 0, \\\"Price must be at least 1 wei\\\");\\r\\n    require(msg.value == listingPrice, \\\"Price must be equal to listing price\\\");\\r\\n    require(idToMarketItem[tokenId].seller == address(0), \\\"Already Listed!\\\");\\r\\n    require(\\r\\n      idToMarketItem[tokenId].owner == msg.sender,\\r\\n      \\\"Only owner can List Item!\\\"\\r\\n    );\\r\\n\\r\\n    _listItemId.increment();\\r\\n\\r\\n    idToMarketItem[tokenId].sold = false;\\r\\n    idToMarketItem[tokenId].price = price;\\r\\n    idToMarketItem[tokenId].seller = payable(msg.sender);\\r\\n    idToMarketItem[tokenId].owner = payable(address(this));\\r\\n\\r\\n    _transfer(msg.sender, address(this), tokenId);\\r\\n    //listing price send to contract\\r\\n    listingProceeds += 0.025 ether;\\r\\n    emit MarketItemCreated(tokenId, msg.sender, address(this), price, false);\\r\\n  }\\r\\n\\r\\n  /* Creates the sale of a marketplace item */\\r\\n  /* Transfers ownership of the item, as well as funds between parties */\\r\\n  function createMarketSale(uint256 tokenId) public payable isPaused {\\r\\n    uint256 price = idToMarketItem[tokenId].price;\\r\\n    address seller = idToMarketItem[tokenId].seller;\\r\\n    require(seller != msg.sender, \\\"Owner cant buy his Own Nft\\\");\\r\\n    require(\\r\\n      msg.value >= price,\\r\\n      \\\"Please submit the asking price in order to complete the purchase\\\"\\r\\n    );\\r\\n    idToMarketItem[tokenId].owner = payable(msg.sender);\\r\\n    idToMarketItem[tokenId].sold = true;\\r\\n    idToMarketItem[tokenId].seller = payable(address(0));\\r\\n    _itemsSold.increment();\\r\\n    _transfer(address(this), msg.sender, tokenId);\\r\\n    sellerProceeds[seller] += msg.value;\\r\\n\\r\\n    emit MarketItemCreated(tokenId, address(0), msg.sender, price, true);\\r\\n  }\\r\\n\\r\\n  function withdrawProceeds() public payable isPaused nonReentrant {\\r\\n    require(\\r\\n      sellerProceeds[msg.sender] > 0,\\r\\n      \\\"Can't withdraw, balance is empty!\\\"\\r\\n    );\\r\\n    uint256 totalProceeds = sellerProceeds[msg.sender];\\r\\n    sellerProceeds[msg.sender] = 0;\\r\\n    payable(msg.sender).transfer(totalProceeds);\\r\\n  }\\r\\n\\r\\n  /* Returns all unsold market items */\\r\\n  function fetchMarketItems() public view returns (MarketItem[] memory) {\\r\\n    uint256 itemCount = _listItemId.current();\\r\\n    uint256 unsoldItemCount = _listItemId.current() - _itemsSold.current();\\r\\n    uint256 currentIndex = 0;\\r\\n\\r\\n    MarketItem[] memory items = new MarketItem[](unsoldItemCount);\\r\\n    for (uint256 i = 0; i < itemCount; i++) {\\r\\n      if (idToMarketItem[i + 1].owner == address(this)) {\\r\\n        uint256 currentId = i + 1;\\r\\n        MarketItem storage currentItem = idToMarketItem[currentId];\\r\\n        items[currentIndex] = currentItem;\\r\\n        currentIndex += 1;\\r\\n      }\\r\\n    }\\r\\n    return items;\\r\\n  }\\r\\n\\r\\n  /* Returns only items that a user has purchased */\\r\\n  function fetchMyNFTs() public view returns (MarketItem[] memory) {\\r\\n    uint256 totalItemCount = _tokenIds.current();\\r\\n    uint256 itemCount = 0;\\r\\n    uint256 currentIndex = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n      if (idToMarketItem[i + 1].owner == msg.sender) {\\r\\n        itemCount += 1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    MarketItem[] memory items = new MarketItem[](itemCount);\\r\\n    for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n      if (idToMarketItem[i + 1].owner == msg.sender) {\\r\\n        uint256 currentId = i + 1;\\r\\n        MarketItem storage currentItem = idToMarketItem[currentId];\\r\\n        items[currentIndex] = currentItem;\\r\\n        currentIndex += 1;\\r\\n      }\\r\\n    }\\r\\n    return items;\\r\\n  }\\r\\n\\r\\n  /* Returns only items a user has listed */\\r\\n  function fetchItemsListed() public view returns (MarketItem[] memory) {\\r\\n    uint256 totalItemCount = _listItemId.current();\\r\\n    uint256 itemCount = 0;\\r\\n    uint256 currentIndex = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n      if (idToMarketItem[i + 1].seller == msg.sender) {\\r\\n        itemCount += 1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    MarketItem[] memory items = new MarketItem[](itemCount);\\r\\n    for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n      if (idToMarketItem[i + 1].seller == msg.sender) {\\r\\n        uint256 currentId = i + 1;\\r\\n        MarketItem storage currentItem = idToMarketItem[currentId];\\r\\n        items[currentIndex] = currentItem;\\r\\n        currentIndex += 1;\\r\\n      }\\r\\n    }\\r\\n    return items;\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    if (revealed) {\\r\\n      return super.tokenURI(tokenId);\\r\\n    } else {\\r\\n      return revealUri;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function togglePublicMinting() public onlyOwner {\\r\\n    publicMint = !publicMint;\\r\\n  }\\r\\n\\r\\n  function togglePause() public onlyOwner {\\r\\n    paused = !paused;\\r\\n  }\\r\\n\\r\\n  function toggleReveal() public onlyOwner {\\r\\n    revealed = !revealed;\\r\\n  }\\r\\n\\r\\n  function toggleMintPause() public onlyOwner {\\r\\n    mintPaused = !mintPaused;\\r\\n  }\\r\\n\\r\\n  function setVip(address toVip) public onlyOwner {\\r\\n    require(!isVip[toVip], \\\"Address is already vip\\\");\\r\\n    isVip[toVip] = true;\\r\\n    vipAddresses.push(toVip);\\r\\n  }\\r\\n\\r\\n  function removeVip(address toVip) public onlyOwner {\\r\\n    require(isVip[toVip], \\\"Address is already not a vip\\\");\\r\\n    isVip[toVip] = false;\\r\\n    uint256 vipLength = vipAddresses.length;\\r\\n    for (uint256 i = 0; i >= vipLength; i++) {\\r\\n      if (vipAddresses[i] == toVip) {\\r\\n        delete vipAddresses[i];\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function updateMintLimit(uint256 newLimit) public onlyOwner {\\r\\n    mintLimit = newLimit;\\r\\n  }\\r\\n\\r\\n  function updateUserLimit(address toReset, uint256 listingAmt)\\r\\n    public\\r\\n    onlyOwner\\r\\n  {\\r\\n    require(!isVip[toReset], \\\"Address is Vip\\\");\\r\\n    require(mintingLeft[toReset] != 0, \\\"Already at min limit\\\");\\r\\n    mintingLeft[toReset] -= listingAmt;\\r\\n  }\\r\\n\\r\\n  function withdrawListingPrice() public payable onlyOwner {\\r\\n    require(listingProceeds != 0, \\\"cant withdraw 0 eth\\\");\\r\\n    uint256 price = listingProceeds;\\r\\n    listingProceeds = 0;\\r\\n    payable(msg.sender).transfer(price);\\r\\n  }\\r\\n\\r\\n  function getMintPauseStatus() public view returns (bool) {\\r\\n    return mintPaused;\\r\\n  }\\r\\n\\r\\n  function getRevealState() public view returns (bool) {\\r\\n    return revealed;\\r\\n  }\\r\\n\\r\\n  function getPauseState() public view returns (bool) {\\r\\n    return paused;\\r\\n  }\\r\\n\\r\\n  function getPublicMintState() public view returns (bool) {\\r\\n    return publicMint;\\r\\n  }\\r\\n\\r\\n  function getMintLimit() public view returns (uint256) {\\r\\n    return mintLimit;\\r\\n  }\\r\\n\\r\\n  function getVipAddresses() public view returns (address[] memory) {\\r\\n    return vipAddresses;\\r\\n  }\\r\\n\\r\\n  /* Returns the listing price of the contract */\\r\\n  function getListingPrice() public view returns (uint256) {\\r\\n    return listingPrice;\\r\\n  }\\r\\n\\r\\n  /* Returns the proceeds of the seller */\\r\\n  function getProceeds() public view returns (uint256) {\\r\\n    return sellerProceeds[msg.sender];\\r\\n  }\\r\\n\\r\\n  //get contract balance\\r\\n  function getContractBalance() public view returns (uint256) {\\r\\n    return address(this).balance;\\r\\n  }\\r\\n\\r\\n  function getListingProceeds() public view onlyOwner returns (uint256) {\\r\\n    return listingProceeds;\\r\\n  }\\r\\n\\r\\n  function getMintingsLeft() public view returns (uint256) {\\r\\n    uint256 left = mintLimit - mintingLeft[msg.sender];\\r\\n    return left;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x355d8811ed714fd4b4509139950a16db2016122353a7353ede2eefaa53b40b7b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526658d15e17628000600c55604051806080016040528060568152602001620060f6605691396010908051906020019062000040929190620002dc565b503480156200004e57600080fd5b506040516200614c3803806200614c833981810160405281019062000074919062000409565b6040518060400160405280600681526020017f4175646f786f00000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4144584f000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000f8929190620002dc565b50806001908051906020019062000111929190620002dc565b50505060016007819055506200013c620001306200020e60201b60201c565b6200021660201b60201c565b84600f8190555083601160016101000a81548160ff02191690831515021790555082601160006101000a81548160ff0219169083151502179055506001601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081601160026101000a81548160ff02191690831515021790555080601160036101000a81548160ff0219169083151502179055505050505050620004f6565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002ea90620004c0565b90600052602060002090601f0160209004810192826200030e57600085556200035a565b82601f106200032957805160ff19168380011785556200035a565b828001600101855582156200035a579182015b82811115620003595782518255916020019190600101906200033c565b5b5090506200036991906200036d565b5090565b5b80821115620003885760008160009055506001016200036e565b5090565b600080fd5b6000819050919050565b620003a68162000391565b8114620003b257600080fd5b50565b600081519050620003c6816200039b565b92915050565b60008115159050919050565b620003e381620003cc565b8114620003ef57600080fd5b50565b6000815190506200040381620003d8565b92915050565b600080600080600060a086880312156200042857620004276200038c565b5b60006200043888828901620003b5565b95505060206200044b88828901620003f2565b94505060406200045e88828901620003f2565b93505060606200047188828901620003f2565b92505060806200048488828901620003f2565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004d957607f821691505b60208210811415620004f057620004ef62000491565b5b50919050565b615bf080620005066000396000f3fe6080604052600436106102885760003560e01c80636b8a21fc1161015a578063ae0cb2a0116100c1578063c4ae31681161007a578063c4ae316814610924578063c87b56dd1461093b578063e01d55c514610978578063e4439a28146109a1578063e985e9c5146109cc578063f2fde38b14610a0957610288565b8063ae0cb2a014610842578063ae677aa31461086d578063b88d4fde14610889578063bd16a816146108b2578063be9af536146108dd578063c06af3f0146108f957610288565b80638da5cb5b116101135780638da5cb5b146107635780639038e6931461078e5780639218aa281461079857806395d89b41146107c35780639a44f1fb146107ee578063a22cb4651461081957610288565b80636b8a21fc146106655780636f9fb98a1461067c57806370a08231146106a7578063715018a6146106e457806383bd9587146106fb57806384203f4b1461072657610288565b80632df0d528116101fe57806345f8fa80116101b757806345f8fa801461056757806356bda4a2146105925780635b8ad429146105bd5780635c464229146105d45780636045051a146105eb5780636352211e1461062857610288565b80632df0d52814610463578063321d4eac1461048c57806333eba49a146104b5578063361c1995146104e557806342842e0e1461050157806345776a251461052a57610288565b80630f08efe0116102505780630f08efe01461038457806312e85585146103af57806315b92cad146103da57806316544206146103e4578063202e37401461040f57806323b872dd1461043a57610288565b806301ffc9a71461028d57806306fdde03146102ca578063081812fc146102f5578063095ea7b3146103325780630b6c90821461035b575b600080fd5b34801561029957600080fd5b506102b460048036038101906102af9190614025565b610a32565b6040516102c1919061406d565b60405180910390f35b3480156102d657600080fd5b506102df610b14565b6040516102ec9190614121565b60405180910390f35b34801561030157600080fd5b5061031c60048036038101906103179190614179565b610ba6565b60405161032991906141e7565b60405180910390f35b34801561033e57600080fd5b506103596004803603810190610354919061422e565b610bec565b005b34801561036757600080fd5b50610382600480360381019061037d919061426e565b610d04565b005b34801561039057600080fd5b50610399610e57565b6040516103a691906143f1565b60405180910390f35b3480156103bb57600080fd5b506103c46110c0565b6040516103d19190614422565b60405180910390f35b6103e26110ca565b005b3480156103f057600080fd5b506103f9611171565b604051610406919061406d565b60405180910390f35b34801561041b57600080fd5b50610424611188565b60405161043191906143f1565b60405180910390f35b34801561044657600080fd5b50610461600480360381019061045c919061443d565b611476565b005b34801561046f57600080fd5b5061048a6004803603810190610485919061426e565b6114d6565b005b34801561049857600080fd5b506104b360048036038101906104ae919061422e565b6116a2565b005b6104cf60048036038101906104ca91906145c5565b611814565b6040516104dc9190614422565b60405180910390f35b6104ff60048036038101906104fa919061460e565b611ca8565b005b34801561050d57600080fd5b506105286004803603810190610523919061443d565b612034565b005b34801561053657600080fd5b50610551600480360381019061054c919061426e565b612054565b60405161055e9190614422565b60405180910390f35b34801561057357600080fd5b5061057c61206c565b60405161058991906143f1565b60405180910390f35b34801561059e57600080fd5b506105a761235a565b6040516105b49190614422565b60405180910390f35b3480156105c957600080fd5b506105d2612364565b005b3480156105e057600080fd5b506105e9612398565b005b3480156105f757600080fd5b50610612600480360381019061060d9190614179565b6123cc565b60405161061f91906141e7565b60405180910390f35b34801561063457600080fd5b5061064f600480360381019061064a9190614179565b61240b565b60405161065c91906141e7565b60405180910390f35b34801561067157600080fd5b5061067a6124bd565b005b34801561068857600080fd5b506106916124f1565b60405161069e9190614422565b60405180910390f35b3480156106b357600080fd5b506106ce60048036038101906106c9919061426e565b6124f9565b6040516106db9190614422565b60405180910390f35b3480156106f057600080fd5b506106f96125b1565b005b34801561070757600080fd5b506107106125c5565b60405161071d9190614422565b60405180910390f35b34801561073257600080fd5b5061074d6004803603810190610748919061426e565b61260c565b60405161075a919061406d565b60405180910390f35b34801561076f57600080fd5b5061077861262c565b60405161078591906141e7565b60405180910390f35b610796612656565b005b3480156107a457600080fd5b506107ad612851565b6040516107ba9190614422565b60405180910390f35b3480156107cf57600080fd5b506107d86128aa565b6040516107e59190614121565b60405180910390f35b3480156107fa57600080fd5b5061080361293c565b604051610810919061406d565b60405180910390f35b34801561082557600080fd5b50610840600480360381019061083b919061467a565b612953565b005b34801561084e57600080fd5b50610857612969565b6040516108649190614422565b60405180910390f35b61088760048036038101906108829190614179565b61297b565b005b34801561089557600080fd5b506108b060048036038101906108ab919061475b565b61298d565b005b3480156108be57600080fd5b506108c76129ef565b6040516108d4919061489c565b60405180910390f35b6108f760048036038101906108f29190614179565b612a7d565b005b34801561090557600080fd5b5061090e612d5f565b60405161091b919061406d565b60405180910390f35b34801561093057600080fd5b50610939612d76565b005b34801561094757600080fd5b50610962600480360381019061095d9190614179565b612daa565b60405161096f9190614121565b60405180910390f35b34801561098457600080fd5b5061099f600480360381019061099a9190614179565b612e64565b005b3480156109ad57600080fd5b506109b6612e76565b6040516109c3919061406d565b60405180910390f35b3480156109d857600080fd5b506109f360048036038101906109ee91906148be565b612e8d565b604051610a00919061406d565b60405180910390f35b348015610a1557600080fd5b50610a306004803603810190610a2b919061426e565b612f21565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610afd57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610b0d5750610b0c82612fa5565b5b9050919050565b606060008054610b239061492d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4f9061492d565b8015610b9c5780601f10610b7157610100808354040283529160200191610b9c565b820191906000526020600020905b815481529060010190602001808311610b7f57829003601f168201915b5050505050905090565b6000610bb18261300f565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610bf78261240b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5f906149d1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c8761305a565b73ffffffffffffffffffffffffffffffffffffffff161480610cb65750610cb581610cb061305a565b612e8d565b5b610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec90614a63565b60405180910390fd5b610cff8383613062565b505050565b610d0c61311b565b601560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9090614acf565b60405180910390fd5b6001601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600e819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610e65600a613199565b90506000610e73600b613199565b610e7d600a613199565b610e879190614b1e565b90506000808267ffffffffffffffff811115610ea657610ea561449a565b5b604051908082528060200260200182016040528015610edf57816020015b610ecc613eb9565b815260200190600190039081610ec45790505b50905060005b848110156110b5573073ffffffffffffffffffffffffffffffffffffffff1660126000600184610f159190614b52565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110a2576000600182610f729190614b52565b90506000601260008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505084868151811061108557611084614ba8565b5b602002602001018190525060018561109d9190614b52565b945050505b80806110ad90614bd7565b915050610ee5565b508094505050505090565b6000600c54905090565b6110d261311b565b6000600d541415611118576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110f90614c6c565b60405180910390fd5b6000600d5490506000600d819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561116d573d6000803e3d6000fd5b5050565b6000601160029054906101000a900460ff16905090565b606060006111966009613199565b905060008060005b8381101561123f573373ffffffffffffffffffffffffffffffffffffffff16601260006001846111ce9190614b52565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561122c576001836112299190614b52565b92505b808061123790614bd7565b91505061119e565b5060008267ffffffffffffffff81111561125c5761125b61449a565b5b60405190808252806020026020018201604052801561129557816020015b611282613eb9565b81526020019060019003908161127a5790505b50905060005b8481101561146b573373ffffffffffffffffffffffffffffffffffffffff16601260006001846112cb9190614b52565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114585760006001826113289190614b52565b90506000601260008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505084868151811061143b5761143a614ba8565b5b60200260200101819052506001856114539190614b52565b945050505b808061146390614bd7565b91505061129b565b508094505050505090565b61148761148161305a565b826131a7565b6114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bd90614cfe565b60405180910390fd5b6114d183838361323c565b505050565b6114de61311b565b601560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661156a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156190614d6a565b60405180910390fd5b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600e80549050905060005b81811061169d578273ffffffffffffffffffffffffffffffffffffffff16600e828154811061160157611600614ba8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561168a57600e818154811061165c5761165b614ba8565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808061169590614bd7565b9150506115cf565b505050565b6116aa61311b565b601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172e90614dd6565b60405180910390fd5b6000601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b190614e42565b60405180910390fd5b80601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118099190614b1e565b925050819055505050565b6000601160019054906101000a900460ff1615611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90614eae565b60405180910390fd5b601160029054906101000a900460ff16156118b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ad90614f1a565b60405180910390fd5b60008251116118f1576040517f5e4c975a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6014826040516119019190614f76565b908152602001604051809103902060009054906101000a900460ff1615611954576040517f5f3b70f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611acc57601160009054906101000a900460ff1615611a9957600f54601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3490614fd9565b60405180910390fd5b6001601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a8d9190614b52565b92505081905550611acb565b6040517fe70cd58c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6001601483604051611ade9190614f76565b908152602001604051809103902060006101000a81548160ff021916908315150217905550611b0d60096134a3565b6000611b196009613199565b9050611b2533826134b9565b611b2f8184613693565b6040518060a00160405280828152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160001515815250601260008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050807fb640004f1d14576d0c209e240cad0410e0d8c0c33a09375861fbadae2588a98d600033600080604051611c97949392919061503e565b60405180910390a280915050919050565b601160019054906101000a900460ff1615611cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cef90614eae565b60405180910390fd5b60008111611d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d32906150cf565b60405180910390fd5b600c543414611d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7690615161565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1b906151cd565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebf90615239565b60405180910390fd5b611ed2600a6134a3565b60006012600084815260200190815260200160002060040160006101000a81548160ff021916908315150217905550806012600084815260200190815260200160002060030181905550336012600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550306012600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611fd133308461323c565b6658d15e17628000600d6000828254611fea9190614b52565b92505081905550817fb640004f1d14576d0c209e240cad0410e0d8c0c33a09375861fbadae2588a98d33308460006040516120289493929190615259565b60405180910390a25050565b61204f8383836040518060200160405280600081525061298d565b505050565b60166020528060005260406000206000915090505481565b6060600061207a600a613199565b905060008060005b83811015612123573373ffffffffffffffffffffffffffffffffffffffff16601260006001846120b29190614b52565b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156121105760018361210d9190614b52565b92505b808061211b90614bd7565b915050612082565b5060008267ffffffffffffffff8111156121405761213f61449a565b5b60405190808252806020026020018201604052801561217957816020015b612166613eb9565b81526020019060019003908161215e5790505b50905060005b8481101561234f573373ffffffffffffffffffffffffffffffffffffffff16601260006001846121af9190614b52565b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561233c57600060018261220c9190614b52565b90506000601260008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505084868151811061231f5761231e614ba8565b5b60200260200101819052506001856123379190614b52565b945050505b808061234790614bd7565b91505061217f565b508094505050505090565b6000600f54905090565b61236c61311b565b601160039054906101000a900460ff1615601160036101000a81548160ff021916908315150217905550565b6123a061311b565b601160029054906101000a900460ff1615601160026101000a81548160ff021916908315150217905550565b600e81815481106123dc57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ab906152ea565b60405180910390fd5b80915050919050565b6124c561311b565b601160009054906101000a900460ff1615601160006101000a81548160ff021916908315150217905550565b600047905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561256a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125619061537c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6125b961311b565b6125c36000613707565b565b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60156020528060005260406000206000915054906101000a900460ff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b601160019054906101000a900460ff16156126a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269d90614eae565b60405180910390fd5b600260075414156126ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e3906153e8565b60405180910390fd5b60026007819055506000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276d9061547a565b60405180910390fd5b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612845573d6000803e3d6000fd5b50506001600781905550565b600080601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600f546128a19190614b1e565b90508091505090565b6060600180546128b99061492d565b80601f01602080910402602001604051908101604052809291908181526020018280546128e59061492d565b80156129325780601f1061290757610100808354040283529160200191612932565b820191906000526020600020905b81548152906001019060200180831161291557829003601f168201915b5050505050905090565b6000601160019054906101000a900460ff16905090565b61296561295e61305a565b83836137cd565b5050565b600061297361311b565b600d54905090565b61298361311b565b80600c8190555050565b61299e61299861305a565b836131a7565b6129dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d490614cfe565b60405180910390fd5b6129e98484848461393a565b50505050565b6060600e805480602002602001604051908101604052809291908181526020018280548015612a7357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612a29575b5050505050905090565b601160019054906101000a900460ff1615612acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac490614eae565b60405180910390fd5b60006012600083815260200190815260200160002060030154905060006012600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b89906154e6565b60405180910390fd5b81341015612bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcc90615578565b60405180910390fd5b336012600085815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016012600085815260200190815260200160002060040160006101000a81548160ff02191690831515021790555060006012600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612cb9600b6134a3565b612cc430338561323c565b34601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d139190614b52565b92505081905550827fb640004f1d14576d0c209e240cad0410e0d8c0c33a09375861fbadae2588a98d600033856001604051612d529493929190615259565b60405180910390a2505050565b6000601160009054906101000a900460ff16905090565b612d7e61311b565b601160019054906101000a900460ff1615601160016101000a81548160ff021916908315150217905550565b6060601160039054906101000a900460ff1615612dd157612dca82613996565b9050612e5f565b60108054612dde9061492d565b80601f0160208091040260200160405190810160405280929190818152602001828054612e0a9061492d565b8015612e575780601f10612e2c57610100808354040283529160200191612e57565b820191906000526020600020905b815481529060010190602001808311612e3a57829003601f168201915b505050505090505b919050565b612e6c61311b565b80600f8190555050565b6000601160039054906101000a900460ff16905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612f2961311b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f909061560a565b60405180910390fd5b612fa281613707565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61301881613aa9565b613057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304e906152ea565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166130d58361240b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61312361305a565b73ffffffffffffffffffffffffffffffffffffffff1661314161262c565b73ffffffffffffffffffffffffffffffffffffffff1614613197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161318e90615676565b60405180910390fd5b565b600081600001549050919050565b6000806131b38361240b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806131f557506131f48185612e8d565b5b8061323357508373ffffffffffffffffffffffffffffffffffffffff1661321b84610ba6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661325c8261240b565b73ffffffffffffffffffffffffffffffffffffffff16146132b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a990615708565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613322576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133199061579a565b60405180910390fd5b61332d838383613b15565b613338600082613062565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133889190614b1e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133df9190614b52565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461349e838383613b1a565b505050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352090615806565b60405180910390fd5b61353281613aa9565b15613572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161356990615872565b60405180910390fd5b61357e60008383613b15565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135ce9190614b52565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461368f60008383613b1a565b5050565b61369c82613aa9565b6136db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136d290615904565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190613702929190613f16565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561383c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161383390615970565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161392d919061406d565b60405180910390a3505050565b61394584848461323c565b61395184848484613b1f565b613990576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161398790615a02565b60405180910390fd5b50505050565b60606139a18261300f565b60006006600084815260200190815260200160002080546139c19061492d565b80601f01602080910402602001604051908101604052809291908181526020018280546139ed9061492d565b8015613a3a5780601f10613a0f57610100808354040283529160200191613a3a565b820191906000526020600020905b815481529060010190602001808311613a1d57829003601f168201915b505050505090506000613a4b613cb6565b9050600081511415613a61578192505050613aa4565b600082511115613a96578082604051602001613a7e929190615a22565b60405160208183030381529060405292505050613aa4565b613a9f84613ccd565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000613b408473ffffffffffffffffffffffffffffffffffffffff16613d35565b15613ca9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613b6961305a565b8786866040518563ffffffff1660e01b8152600401613b8b9493929190615a9b565b602060405180830381600087803b158015613ba557600080fd5b505af1925050508015613bd657506040513d601f19601f82011682018060405250810190613bd39190615afc565b60015b613c59573d8060008114613c06576040519150601f19603f3d011682016040523d82523d6000602084013e613c0b565b606091505b50600081511415613c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c4890615a02565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613cae565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060613cd88261300f565b6000613ce2613cb6565b90506000815111613d025760405180602001604052806000815250613d2d565b80613d0c84613d58565b604051602001613d1d929190615a22565b6040516020818303038152906040525b915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415613da0576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613eb4565b600082905060005b60008214613dd2578080613dbb90614bd7565b915050600a82613dcb9190615b58565b9150613da8565b60008167ffffffffffffffff811115613dee57613ded61449a565b5b6040519080825280601f01601f191660200182016040528015613e205781602001600182028036833780820191505090505b5090505b60008514613ead57600182613e399190614b1e565b9150600a85613e489190615b89565b6030613e549190614b52565b60f81b818381518110613e6a57613e69614ba8565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85613ea69190615b58565b9450613e24565b8093505050505b919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b828054613f229061492d565b90600052602060002090601f016020900481019282613f445760008555613f8b565b82601f10613f5d57805160ff1916838001178555613f8b565b82800160010185558215613f8b579182015b82811115613f8a578251825591602001919060010190613f6f565b5b509050613f989190613f9c565b5090565b5b80821115613fb5576000816000905550600101613f9d565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61400281613fcd565b811461400d57600080fd5b50565b60008135905061401f81613ff9565b92915050565b60006020828403121561403b5761403a613fc3565b5b600061404984828501614010565b91505092915050565b60008115159050919050565b61406781614052565b82525050565b6000602082019050614082600083018461405e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156140c25780820151818401526020810190506140a7565b838111156140d1576000848401525b50505050565b6000601f19601f8301169050919050565b60006140f382614088565b6140fd8185614093565b935061410d8185602086016140a4565b614116816140d7565b840191505092915050565b6000602082019050818103600083015261413b81846140e8565b905092915050565b6000819050919050565b61415681614143565b811461416157600080fd5b50565b6000813590506141738161414d565b92915050565b60006020828403121561418f5761418e613fc3565b5b600061419d84828501614164565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006141d1826141a6565b9050919050565b6141e1816141c6565b82525050565b60006020820190506141fc60008301846141d8565b92915050565b61420b816141c6565b811461421657600080fd5b50565b60008135905061422881614202565b92915050565b6000806040838503121561424557614244613fc3565b5b600061425385828601614219565b925050602061426485828601614164565b9150509250929050565b60006020828403121561428457614283613fc3565b5b600061429284828501614219565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6142d081614143565b82525050565b60006142e1826141a6565b9050919050565b6142f1816142d6565b82525050565b61430081614052565b82525050565b60a08201600082015161431c60008501826142c7565b50602082015161432f60208501826142e8565b50604082015161434260408501826142e8565b50606082015161435560608501826142c7565b50608082015161436860808501826142f7565b50505050565b600061437a8383614306565b60a08301905092915050565b6000602082019050919050565b600061439e8261429b565b6143a881856142a6565b93506143b3836142b7565b8060005b838110156143e45781516143cb888261436e565b97506143d683614386565b9250506001810190506143b7565b5085935050505092915050565b6000602082019050818103600083015261440b8184614393565b905092915050565b61441c81614143565b82525050565b60006020820190506144376000830184614413565b92915050565b60008060006060848603121561445657614455613fc3565b5b600061446486828701614219565b935050602061447586828701614219565b925050604061448686828701614164565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6144d2826140d7565b810181811067ffffffffffffffff821117156144f1576144f061449a565b5b80604052505050565b6000614504613fb9565b905061451082826144c9565b919050565b600067ffffffffffffffff8211156145305761452f61449a565b5b614539826140d7565b9050602081019050919050565b82818337600083830152505050565b600061456861456384614515565b6144fa565b90508281526020810184848401111561458457614583614495565b5b61458f848285614546565b509392505050565b600082601f8301126145ac576145ab614490565b5b81356145bc848260208601614555565b91505092915050565b6000602082840312156145db576145da613fc3565b5b600082013567ffffffffffffffff8111156145f9576145f8613fc8565b5b61460584828501614597565b91505092915050565b6000806040838503121561462557614624613fc3565b5b600061463385828601614164565b925050602061464485828601614164565b9150509250929050565b61465781614052565b811461466257600080fd5b50565b6000813590506146748161464e565b92915050565b6000806040838503121561469157614690613fc3565b5b600061469f85828601614219565b92505060206146b085828601614665565b9150509250929050565b600067ffffffffffffffff8211156146d5576146d461449a565b5b6146de826140d7565b9050602081019050919050565b60006146fe6146f9846146ba565b6144fa565b90508281526020810184848401111561471a57614719614495565b5b614725848285614546565b509392505050565b600082601f83011261474257614741614490565b5b81356147528482602086016146eb565b91505092915050565b6000806000806080858703121561477557614774613fc3565b5b600061478387828801614219565b945050602061479487828801614219565b93505060406147a587828801614164565b925050606085013567ffffffffffffffff8111156147c6576147c5613fc8565b5b6147d28782880161472d565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614813816141c6565b82525050565b6000614825838361480a565b60208301905092915050565b6000602082019050919050565b6000614849826147de565b61485381856147e9565b935061485e836147fa565b8060005b8381101561488f5781516148768882614819565b975061488183614831565b925050600181019050614862565b5085935050505092915050565b600060208201905081810360008301526148b6818461483e565b905092915050565b600080604083850312156148d5576148d4613fc3565b5b60006148e385828601614219565b92505060206148f485828601614219565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061494557607f821691505b60208210811415614959576149586148fe565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006149bb602183614093565b91506149c68261495f565b604082019050919050565b600060208201905081810360008301526149ea816149ae565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000614a4d603e83614093565b9150614a58826149f1565b604082019050919050565b60006020820190508181036000830152614a7c81614a40565b9050919050565b7f4164647265737320697320616c72656164792076697000000000000000000000600082015250565b6000614ab9601683614093565b9150614ac482614a83565b602082019050919050565b60006020820190508181036000830152614ae881614aac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b2982614143565b9150614b3483614143565b925082821015614b4757614b46614aef565b5b828203905092915050565b6000614b5d82614143565b9150614b6883614143565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614b9d57614b9c614aef565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614be282614143565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c1557614c14614aef565b5b600182019050919050565b7f63616e7420776974686472617720302065746800000000000000000000000000600082015250565b6000614c56601383614093565b9150614c6182614c20565b602082019050919050565b60006020820190508181036000830152614c8581614c49565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000614ce8602e83614093565b9150614cf382614c8c565b604082019050919050565b60006020820190508181036000830152614d1781614cdb565b9050919050565b7f4164647265737320697320616c7265616479206e6f7420612076697000000000600082015250565b6000614d54601c83614093565b9150614d5f82614d1e565b602082019050919050565b60006020820190508181036000830152614d8381614d47565b9050919050565b7f4164647265737320697320566970000000000000000000000000000000000000600082015250565b6000614dc0600e83614093565b9150614dcb82614d8a565b602082019050919050565b60006020820190508181036000830152614def81614db3565b9050919050565b7f416c7265616479206174206d696e206c696d6974000000000000000000000000600082015250565b6000614e2c601483614093565b9150614e3782614df6565b602082019050919050565b60006020820190508181036000830152614e5b81614e1f565b9050919050565b7f436f6e7472616374206973205061757365640000000000000000000000000000600082015250565b6000614e98601283614093565b9150614ea382614e62565b602082019050919050565b60006020820190508181036000830152614ec781614e8b565b9050919050565b7f4d696e74696e6720697320506175736564000000000000000000000000000000600082015250565b6000614f04601183614093565b9150614f0f82614ece565b602082019050919050565b60006020820190508181036000830152614f3381614ef7565b9050919050565b600081905092915050565b6000614f5082614088565b614f5a8185614f3a565b9350614f6a8185602086016140a4565b80840191505092915050565b6000614f828284614f45565b915081905092915050565b7f4d696e74696e67206c696d697420657865656465642100000000000000000000600082015250565b6000614fc3601683614093565b9150614fce82614f8d565b602082019050919050565b60006020820190508181036000830152614ff281614fb6565b9050919050565b6000819050919050565b6000819050919050565b600061502861502361501e84614ff9565b615003565b614143565b9050919050565b6150388161500d565b82525050565b600060808201905061505360008301876141d8565b61506060208301866141d8565b61506d604083018561502f565b61507a606083018461405e565b95945050505050565b7f5072696365206d757374206265206174206c6561737420312077656900000000600082015250565b60006150b9601c83614093565b91506150c482615083565b602082019050919050565b600060208201905081810360008301526150e8816150ac565b9050919050565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b600061514b602483614093565b9150615156826150ef565b604082019050919050565b6000602082019050818103600083015261517a8161513e565b9050919050565b7f416c7265616479204c6973746564210000000000000000000000000000000000600082015250565b60006151b7600f83614093565b91506151c282615181565b602082019050919050565b600060208201905081810360008301526151e6816151aa565b9050919050565b7f4f6e6c79206f776e65722063616e204c697374204974656d2100000000000000600082015250565b6000615223601983614093565b915061522e826151ed565b602082019050919050565b6000602082019050818103600083015261525281615216565b9050919050565b600060808201905061526e60008301876141d8565b61527b60208301866141d8565b6152886040830185614413565b615295606083018461405e565b95945050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006152d4601883614093565b91506152df8261529e565b602082019050919050565b60006020820190508181036000830152615303816152c7565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000615366602983614093565b91506153718261530a565b604082019050919050565b6000602082019050818103600083015261539581615359565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006153d2601f83614093565b91506153dd8261539c565b602082019050919050565b60006020820190508181036000830152615401816153c5565b9050919050565b7f43616e27742077697468647261772c2062616c616e636520697320656d70747960008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b6000615464602183614093565b915061546f82615408565b604082019050919050565b6000602082019050818103600083015261549381615457565b9050919050565b7f4f776e65722063616e742062757920686973204f776e204e6674000000000000600082015250565b60006154d0601a83614093565b91506154db8261549a565b602082019050919050565b600060208201905081810360008301526154ff816154c3565b9050919050565b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520746865207075726368617365602082015250565b6000615562604083614093565b915061556d82615506565b604082019050919050565b6000602082019050818103600083015261559181615555565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006155f4602683614093565b91506155ff82615598565b604082019050919050565b60006020820190508181036000830152615623816155e7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615660602083614093565b915061566b8261562a565b602082019050919050565b6000602082019050818103600083015261568f81615653565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006156f2602583614093565b91506156fd82615696565b604082019050919050565b60006020820190508181036000830152615721816156e5565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000615784602483614093565b915061578f82615728565b604082019050919050565b600060208201905081810360008301526157b381615777565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006157f0602083614093565b91506157fb826157ba565b602082019050919050565b6000602082019050818103600083015261581f816157e3565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061585c601c83614093565b915061586782615826565b602082019050919050565b6000602082019050818103600083015261588b8161584f565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006158ee602e83614093565b91506158f982615892565b604082019050919050565b6000602082019050818103600083015261591d816158e1565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061595a601983614093565b915061596582615924565b602082019050919050565b600060208201905081810360008301526159898161594d565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006159ec603283614093565b91506159f782615990565b604082019050919050565b60006020820190508181036000830152615a1b816159df565b9050919050565b6000615a2e8285614f45565b9150615a3a8284614f45565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000615a6d82615a46565b615a778185615a51565b9350615a878185602086016140a4565b615a90816140d7565b840191505092915050565b6000608082019050615ab060008301876141d8565b615abd60208301866141d8565b615aca6040830185614413565b8181036060830152615adc8184615a62565b905095945050505050565b600081519050615af681613ff9565b92915050565b600060208284031215615b1257615b11613fc3565b5b6000615b2084828501615ae7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615b6382614143565b9150615b6e83614143565b925082615b7e57615b7d615b29565b5b828204905092915050565b6000615b9482614143565b9150615b9f83614143565b925082615baf57615bae615b29565b5b82820690509291505056fea26469706673582212206cb5a36bba81a20c6cc097d768c232b87a448e6179892a28e52f1969231534b864736f6c63430008080033697066733a2f2f6261667962656966356762357263756d633434756865616e696968716a7a64763272716a786432686c6b6d706f776f77747667756a6665377475692f72657665616c4d657461646174612e6a736f6e",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c80636b8a21fc1161015a578063ae0cb2a0116100c1578063c4ae31681161007a578063c4ae316814610924578063c87b56dd1461093b578063e01d55c514610978578063e4439a28146109a1578063e985e9c5146109cc578063f2fde38b14610a0957610288565b8063ae0cb2a014610842578063ae677aa31461086d578063b88d4fde14610889578063bd16a816146108b2578063be9af536146108dd578063c06af3f0146108f957610288565b80638da5cb5b116101135780638da5cb5b146107635780639038e6931461078e5780639218aa281461079857806395d89b41146107c35780639a44f1fb146107ee578063a22cb4651461081957610288565b80636b8a21fc146106655780636f9fb98a1461067c57806370a08231146106a7578063715018a6146106e457806383bd9587146106fb57806384203f4b1461072657610288565b80632df0d528116101fe57806345f8fa80116101b757806345f8fa801461056757806356bda4a2146105925780635b8ad429146105bd5780635c464229146105d45780636045051a146105eb5780636352211e1461062857610288565b80632df0d52814610463578063321d4eac1461048c57806333eba49a146104b5578063361c1995146104e557806342842e0e1461050157806345776a251461052a57610288565b80630f08efe0116102505780630f08efe01461038457806312e85585146103af57806315b92cad146103da57806316544206146103e4578063202e37401461040f57806323b872dd1461043a57610288565b806301ffc9a71461028d57806306fdde03146102ca578063081812fc146102f5578063095ea7b3146103325780630b6c90821461035b575b600080fd5b34801561029957600080fd5b506102b460048036038101906102af9190614025565b610a32565b6040516102c1919061406d565b60405180910390f35b3480156102d657600080fd5b506102df610b14565b6040516102ec9190614121565b60405180910390f35b34801561030157600080fd5b5061031c60048036038101906103179190614179565b610ba6565b60405161032991906141e7565b60405180910390f35b34801561033e57600080fd5b506103596004803603810190610354919061422e565b610bec565b005b34801561036757600080fd5b50610382600480360381019061037d919061426e565b610d04565b005b34801561039057600080fd5b50610399610e57565b6040516103a691906143f1565b60405180910390f35b3480156103bb57600080fd5b506103c46110c0565b6040516103d19190614422565b60405180910390f35b6103e26110ca565b005b3480156103f057600080fd5b506103f9611171565b604051610406919061406d565b60405180910390f35b34801561041b57600080fd5b50610424611188565b60405161043191906143f1565b60405180910390f35b34801561044657600080fd5b50610461600480360381019061045c919061443d565b611476565b005b34801561046f57600080fd5b5061048a6004803603810190610485919061426e565b6114d6565b005b34801561049857600080fd5b506104b360048036038101906104ae919061422e565b6116a2565b005b6104cf60048036038101906104ca91906145c5565b611814565b6040516104dc9190614422565b60405180910390f35b6104ff60048036038101906104fa919061460e565b611ca8565b005b34801561050d57600080fd5b506105286004803603810190610523919061443d565b612034565b005b34801561053657600080fd5b50610551600480360381019061054c919061426e565b612054565b60405161055e9190614422565b60405180910390f35b34801561057357600080fd5b5061057c61206c565b60405161058991906143f1565b60405180910390f35b34801561059e57600080fd5b506105a761235a565b6040516105b49190614422565b60405180910390f35b3480156105c957600080fd5b506105d2612364565b005b3480156105e057600080fd5b506105e9612398565b005b3480156105f757600080fd5b50610612600480360381019061060d9190614179565b6123cc565b60405161061f91906141e7565b60405180910390f35b34801561063457600080fd5b5061064f600480360381019061064a9190614179565b61240b565b60405161065c91906141e7565b60405180910390f35b34801561067157600080fd5b5061067a6124bd565b005b34801561068857600080fd5b506106916124f1565b60405161069e9190614422565b60405180910390f35b3480156106b357600080fd5b506106ce60048036038101906106c9919061426e565b6124f9565b6040516106db9190614422565b60405180910390f35b3480156106f057600080fd5b506106f96125b1565b005b34801561070757600080fd5b506107106125c5565b60405161071d9190614422565b60405180910390f35b34801561073257600080fd5b5061074d6004803603810190610748919061426e565b61260c565b60405161075a919061406d565b60405180910390f35b34801561076f57600080fd5b5061077861262c565b60405161078591906141e7565b60405180910390f35b610796612656565b005b3480156107a457600080fd5b506107ad612851565b6040516107ba9190614422565b60405180910390f35b3480156107cf57600080fd5b506107d86128aa565b6040516107e59190614121565b60405180910390f35b3480156107fa57600080fd5b5061080361293c565b604051610810919061406d565b60405180910390f35b34801561082557600080fd5b50610840600480360381019061083b919061467a565b612953565b005b34801561084e57600080fd5b50610857612969565b6040516108649190614422565b60405180910390f35b61088760048036038101906108829190614179565b61297b565b005b34801561089557600080fd5b506108b060048036038101906108ab919061475b565b61298d565b005b3480156108be57600080fd5b506108c76129ef565b6040516108d4919061489c565b60405180910390f35b6108f760048036038101906108f29190614179565b612a7d565b005b34801561090557600080fd5b5061090e612d5f565b60405161091b919061406d565b60405180910390f35b34801561093057600080fd5b50610939612d76565b005b34801561094757600080fd5b50610962600480360381019061095d9190614179565b612daa565b60405161096f9190614121565b60405180910390f35b34801561098457600080fd5b5061099f600480360381019061099a9190614179565b612e64565b005b3480156109ad57600080fd5b506109b6612e76565b6040516109c3919061406d565b60405180910390f35b3480156109d857600080fd5b506109f360048036038101906109ee91906148be565b612e8d565b604051610a00919061406d565b60405180910390f35b348015610a1557600080fd5b50610a306004803603810190610a2b919061426e565b612f21565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610afd57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610b0d5750610b0c82612fa5565b5b9050919050565b606060008054610b239061492d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4f9061492d565b8015610b9c5780601f10610b7157610100808354040283529160200191610b9c565b820191906000526020600020905b815481529060010190602001808311610b7f57829003601f168201915b5050505050905090565b6000610bb18261300f565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610bf78261240b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5f906149d1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c8761305a565b73ffffffffffffffffffffffffffffffffffffffff161480610cb65750610cb581610cb061305a565b612e8d565b5b610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec90614a63565b60405180910390fd5b610cff8383613062565b505050565b610d0c61311b565b601560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9090614acf565b60405180910390fd5b6001601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600e819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610e65600a613199565b90506000610e73600b613199565b610e7d600a613199565b610e879190614b1e565b90506000808267ffffffffffffffff811115610ea657610ea561449a565b5b604051908082528060200260200182016040528015610edf57816020015b610ecc613eb9565b815260200190600190039081610ec45790505b50905060005b848110156110b5573073ffffffffffffffffffffffffffffffffffffffff1660126000600184610f159190614b52565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110a2576000600182610f729190614b52565b90506000601260008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505084868151811061108557611084614ba8565b5b602002602001018190525060018561109d9190614b52565b945050505b80806110ad90614bd7565b915050610ee5565b508094505050505090565b6000600c54905090565b6110d261311b565b6000600d541415611118576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110f90614c6c565b60405180910390fd5b6000600d5490506000600d819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561116d573d6000803e3d6000fd5b5050565b6000601160029054906101000a900460ff16905090565b606060006111966009613199565b905060008060005b8381101561123f573373ffffffffffffffffffffffffffffffffffffffff16601260006001846111ce9190614b52565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561122c576001836112299190614b52565b92505b808061123790614bd7565b91505061119e565b5060008267ffffffffffffffff81111561125c5761125b61449a565b5b60405190808252806020026020018201604052801561129557816020015b611282613eb9565b81526020019060019003908161127a5790505b50905060005b8481101561146b573373ffffffffffffffffffffffffffffffffffffffff16601260006001846112cb9190614b52565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114585760006001826113289190614b52565b90506000601260008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505084868151811061143b5761143a614ba8565b5b60200260200101819052506001856114539190614b52565b945050505b808061146390614bd7565b91505061129b565b508094505050505090565b61148761148161305a565b826131a7565b6114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bd90614cfe565b60405180910390fd5b6114d183838361323c565b505050565b6114de61311b565b601560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661156a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156190614d6a565b60405180910390fd5b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600e80549050905060005b81811061169d578273ffffffffffffffffffffffffffffffffffffffff16600e828154811061160157611600614ba8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561168a57600e818154811061165c5761165b614ba8565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808061169590614bd7565b9150506115cf565b505050565b6116aa61311b565b601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172e90614dd6565b60405180910390fd5b6000601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b190614e42565b60405180910390fd5b80601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118099190614b1e565b925050819055505050565b6000601160019054906101000a900460ff1615611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90614eae565b60405180910390fd5b601160029054906101000a900460ff16156118b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ad90614f1a565b60405180910390fd5b60008251116118f1576040517f5e4c975a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6014826040516119019190614f76565b908152602001604051809103902060009054906101000a900460ff1615611954576040517f5f3b70f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611acc57601160009054906101000a900460ff1615611a9957600f54601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3490614fd9565b60405180910390fd5b6001601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a8d9190614b52565b92505081905550611acb565b6040517fe70cd58c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6001601483604051611ade9190614f76565b908152602001604051809103902060006101000a81548160ff021916908315150217905550611b0d60096134a3565b6000611b196009613199565b9050611b2533826134b9565b611b2f8184613693565b6040518060a00160405280828152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160001515815250601260008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050807fb640004f1d14576d0c209e240cad0410e0d8c0c33a09375861fbadae2588a98d600033600080604051611c97949392919061503e565b60405180910390a280915050919050565b601160019054906101000a900460ff1615611cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cef90614eae565b60405180910390fd5b60008111611d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d32906150cf565b60405180910390fd5b600c543414611d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7690615161565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1b906151cd565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebf90615239565b60405180910390fd5b611ed2600a6134a3565b60006012600084815260200190815260200160002060040160006101000a81548160ff021916908315150217905550806012600084815260200190815260200160002060030181905550336012600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550306012600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611fd133308461323c565b6658d15e17628000600d6000828254611fea9190614b52565b92505081905550817fb640004f1d14576d0c209e240cad0410e0d8c0c33a09375861fbadae2588a98d33308460006040516120289493929190615259565b60405180910390a25050565b61204f8383836040518060200160405280600081525061298d565b505050565b60166020528060005260406000206000915090505481565b6060600061207a600a613199565b905060008060005b83811015612123573373ffffffffffffffffffffffffffffffffffffffff16601260006001846120b29190614b52565b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156121105760018361210d9190614b52565b92505b808061211b90614bd7565b915050612082565b5060008267ffffffffffffffff8111156121405761213f61449a565b5b60405190808252806020026020018201604052801561217957816020015b612166613eb9565b81526020019060019003908161215e5790505b50905060005b8481101561234f573373ffffffffffffffffffffffffffffffffffffffff16601260006001846121af9190614b52565b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561233c57600060018261220c9190614b52565b90506000601260008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505084868151811061231f5761231e614ba8565b5b60200260200101819052506001856123379190614b52565b945050505b808061234790614bd7565b91505061217f565b508094505050505090565b6000600f54905090565b61236c61311b565b601160039054906101000a900460ff1615601160036101000a81548160ff021916908315150217905550565b6123a061311b565b601160029054906101000a900460ff1615601160026101000a81548160ff021916908315150217905550565b600e81815481106123dc57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ab906152ea565b60405180910390fd5b80915050919050565b6124c561311b565b601160009054906101000a900460ff1615601160006101000a81548160ff021916908315150217905550565b600047905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561256a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125619061537c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6125b961311b565b6125c36000613707565b565b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60156020528060005260406000206000915054906101000a900460ff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b601160019054906101000a900460ff16156126a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269d90614eae565b60405180910390fd5b600260075414156126ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e3906153e8565b60405180910390fd5b60026007819055506000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276d9061547a565b60405180910390fd5b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612845573d6000803e3d6000fd5b50506001600781905550565b600080601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600f546128a19190614b1e565b90508091505090565b6060600180546128b99061492d565b80601f01602080910402602001604051908101604052809291908181526020018280546128e59061492d565b80156129325780601f1061290757610100808354040283529160200191612932565b820191906000526020600020905b81548152906001019060200180831161291557829003601f168201915b5050505050905090565b6000601160019054906101000a900460ff16905090565b61296561295e61305a565b83836137cd565b5050565b600061297361311b565b600d54905090565b61298361311b565b80600c8190555050565b61299e61299861305a565b836131a7565b6129dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d490614cfe565b60405180910390fd5b6129e98484848461393a565b50505050565b6060600e805480602002602001604051908101604052809291908181526020018280548015612a7357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612a29575b5050505050905090565b601160019054906101000a900460ff1615612acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac490614eae565b60405180910390fd5b60006012600083815260200190815260200160002060030154905060006012600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b89906154e6565b60405180910390fd5b81341015612bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcc90615578565b60405180910390fd5b336012600085815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016012600085815260200190815260200160002060040160006101000a81548160ff02191690831515021790555060006012600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612cb9600b6134a3565b612cc430338561323c565b34601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d139190614b52565b92505081905550827fb640004f1d14576d0c209e240cad0410e0d8c0c33a09375861fbadae2588a98d600033856001604051612d529493929190615259565b60405180910390a2505050565b6000601160009054906101000a900460ff16905090565b612d7e61311b565b601160019054906101000a900460ff1615601160016101000a81548160ff021916908315150217905550565b6060601160039054906101000a900460ff1615612dd157612dca82613996565b9050612e5f565b60108054612dde9061492d565b80601f0160208091040260200160405190810160405280929190818152602001828054612e0a9061492d565b8015612e575780601f10612e2c57610100808354040283529160200191612e57565b820191906000526020600020905b815481529060010190602001808311612e3a57829003601f168201915b505050505090505b919050565b612e6c61311b565b80600f8190555050565b6000601160039054906101000a900460ff16905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612f2961311b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f909061560a565b60405180910390fd5b612fa281613707565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61301881613aa9565b613057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304e906152ea565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166130d58361240b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61312361305a565b73ffffffffffffffffffffffffffffffffffffffff1661314161262c565b73ffffffffffffffffffffffffffffffffffffffff1614613197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161318e90615676565b60405180910390fd5b565b600081600001549050919050565b6000806131b38361240b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806131f557506131f48185612e8d565b5b8061323357508373ffffffffffffffffffffffffffffffffffffffff1661321b84610ba6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661325c8261240b565b73ffffffffffffffffffffffffffffffffffffffff16146132b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a990615708565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613322576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133199061579a565b60405180910390fd5b61332d838383613b15565b613338600082613062565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133889190614b1e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133df9190614b52565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461349e838383613b1a565b505050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352090615806565b60405180910390fd5b61353281613aa9565b15613572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161356990615872565b60405180910390fd5b61357e60008383613b15565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135ce9190614b52565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461368f60008383613b1a565b5050565b61369c82613aa9565b6136db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136d290615904565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190613702929190613f16565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561383c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161383390615970565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161392d919061406d565b60405180910390a3505050565b61394584848461323c565b61395184848484613b1f565b613990576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161398790615a02565b60405180910390fd5b50505050565b60606139a18261300f565b60006006600084815260200190815260200160002080546139c19061492d565b80601f01602080910402602001604051908101604052809291908181526020018280546139ed9061492d565b8015613a3a5780601f10613a0f57610100808354040283529160200191613a3a565b820191906000526020600020905b815481529060010190602001808311613a1d57829003601f168201915b505050505090506000613a4b613cb6565b9050600081511415613a61578192505050613aa4565b600082511115613a96578082604051602001613a7e929190615a22565b60405160208183030381529060405292505050613aa4565b613a9f84613ccd565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000613b408473ffffffffffffffffffffffffffffffffffffffff16613d35565b15613ca9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613b6961305a565b8786866040518563ffffffff1660e01b8152600401613b8b9493929190615a9b565b602060405180830381600087803b158015613ba557600080fd5b505af1925050508015613bd657506040513d601f19601f82011682018060405250810190613bd39190615afc565b60015b613c59573d8060008114613c06576040519150601f19603f3d011682016040523d82523d6000602084013e613c0b565b606091505b50600081511415613c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c4890615a02565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613cae565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060613cd88261300f565b6000613ce2613cb6565b90506000815111613d025760405180602001604052806000815250613d2d565b80613d0c84613d58565b604051602001613d1d929190615a22565b6040516020818303038152906040525b915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415613da0576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613eb4565b600082905060005b60008214613dd2578080613dbb90614bd7565b915050600a82613dcb9190615b58565b9150613da8565b60008167ffffffffffffffff811115613dee57613ded61449a565b5b6040519080825280601f01601f191660200182016040528015613e205781602001600182028036833780820191505090505b5090505b60008514613ead57600182613e399190614b1e565b9150600a85613e489190615b89565b6030613e549190614b52565b60f81b818381518110613e6a57613e69614ba8565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85613ea69190615b58565b9450613e24565b8093505050505b919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b828054613f229061492d565b90600052602060002090601f016020900481019282613f445760008555613f8b565b82601f10613f5d57805160ff1916838001178555613f8b565b82800160010185558215613f8b579182015b82811115613f8a578251825591602001919060010190613f6f565b5b509050613f989190613f9c565b5090565b5b80821115613fb5576000816000905550600101613f9d565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61400281613fcd565b811461400d57600080fd5b50565b60008135905061401f81613ff9565b92915050565b60006020828403121561403b5761403a613fc3565b5b600061404984828501614010565b91505092915050565b60008115159050919050565b61406781614052565b82525050565b6000602082019050614082600083018461405e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156140c25780820151818401526020810190506140a7565b838111156140d1576000848401525b50505050565b6000601f19601f8301169050919050565b60006140f382614088565b6140fd8185614093565b935061410d8185602086016140a4565b614116816140d7565b840191505092915050565b6000602082019050818103600083015261413b81846140e8565b905092915050565b6000819050919050565b61415681614143565b811461416157600080fd5b50565b6000813590506141738161414d565b92915050565b60006020828403121561418f5761418e613fc3565b5b600061419d84828501614164565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006141d1826141a6565b9050919050565b6141e1816141c6565b82525050565b60006020820190506141fc60008301846141d8565b92915050565b61420b816141c6565b811461421657600080fd5b50565b60008135905061422881614202565b92915050565b6000806040838503121561424557614244613fc3565b5b600061425385828601614219565b925050602061426485828601614164565b9150509250929050565b60006020828403121561428457614283613fc3565b5b600061429284828501614219565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6142d081614143565b82525050565b60006142e1826141a6565b9050919050565b6142f1816142d6565b82525050565b61430081614052565b82525050565b60a08201600082015161431c60008501826142c7565b50602082015161432f60208501826142e8565b50604082015161434260408501826142e8565b50606082015161435560608501826142c7565b50608082015161436860808501826142f7565b50505050565b600061437a8383614306565b60a08301905092915050565b6000602082019050919050565b600061439e8261429b565b6143a881856142a6565b93506143b3836142b7565b8060005b838110156143e45781516143cb888261436e565b97506143d683614386565b9250506001810190506143b7565b5085935050505092915050565b6000602082019050818103600083015261440b8184614393565b905092915050565b61441c81614143565b82525050565b60006020820190506144376000830184614413565b92915050565b60008060006060848603121561445657614455613fc3565b5b600061446486828701614219565b935050602061447586828701614219565b925050604061448686828701614164565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6144d2826140d7565b810181811067ffffffffffffffff821117156144f1576144f061449a565b5b80604052505050565b6000614504613fb9565b905061451082826144c9565b919050565b600067ffffffffffffffff8211156145305761452f61449a565b5b614539826140d7565b9050602081019050919050565b82818337600083830152505050565b600061456861456384614515565b6144fa565b90508281526020810184848401111561458457614583614495565b5b61458f848285614546565b509392505050565b600082601f8301126145ac576145ab614490565b5b81356145bc848260208601614555565b91505092915050565b6000602082840312156145db576145da613fc3565b5b600082013567ffffffffffffffff8111156145f9576145f8613fc8565b5b61460584828501614597565b91505092915050565b6000806040838503121561462557614624613fc3565b5b600061463385828601614164565b925050602061464485828601614164565b9150509250929050565b61465781614052565b811461466257600080fd5b50565b6000813590506146748161464e565b92915050565b6000806040838503121561469157614690613fc3565b5b600061469f85828601614219565b92505060206146b085828601614665565b9150509250929050565b600067ffffffffffffffff8211156146d5576146d461449a565b5b6146de826140d7565b9050602081019050919050565b60006146fe6146f9846146ba565b6144fa565b90508281526020810184848401111561471a57614719614495565b5b614725848285614546565b509392505050565b600082601f83011261474257614741614490565b5b81356147528482602086016146eb565b91505092915050565b6000806000806080858703121561477557614774613fc3565b5b600061478387828801614219565b945050602061479487828801614219565b93505060406147a587828801614164565b925050606085013567ffffffffffffffff8111156147c6576147c5613fc8565b5b6147d28782880161472d565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614813816141c6565b82525050565b6000614825838361480a565b60208301905092915050565b6000602082019050919050565b6000614849826147de565b61485381856147e9565b935061485e836147fa565b8060005b8381101561488f5781516148768882614819565b975061488183614831565b925050600181019050614862565b5085935050505092915050565b600060208201905081810360008301526148b6818461483e565b905092915050565b600080604083850312156148d5576148d4613fc3565b5b60006148e385828601614219565b92505060206148f485828601614219565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061494557607f821691505b60208210811415614959576149586148fe565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006149bb602183614093565b91506149c68261495f565b604082019050919050565b600060208201905081810360008301526149ea816149ae565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000614a4d603e83614093565b9150614a58826149f1565b604082019050919050565b60006020820190508181036000830152614a7c81614a40565b9050919050565b7f4164647265737320697320616c72656164792076697000000000000000000000600082015250565b6000614ab9601683614093565b9150614ac482614a83565b602082019050919050565b60006020820190508181036000830152614ae881614aac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b2982614143565b9150614b3483614143565b925082821015614b4757614b46614aef565b5b828203905092915050565b6000614b5d82614143565b9150614b6883614143565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614b9d57614b9c614aef565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614be282614143565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c1557614c14614aef565b5b600182019050919050565b7f63616e7420776974686472617720302065746800000000000000000000000000600082015250565b6000614c56601383614093565b9150614c6182614c20565b602082019050919050565b60006020820190508181036000830152614c8581614c49565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000614ce8602e83614093565b9150614cf382614c8c565b604082019050919050565b60006020820190508181036000830152614d1781614cdb565b9050919050565b7f4164647265737320697320616c7265616479206e6f7420612076697000000000600082015250565b6000614d54601c83614093565b9150614d5f82614d1e565b602082019050919050565b60006020820190508181036000830152614d8381614d47565b9050919050565b7f4164647265737320697320566970000000000000000000000000000000000000600082015250565b6000614dc0600e83614093565b9150614dcb82614d8a565b602082019050919050565b60006020820190508181036000830152614def81614db3565b9050919050565b7f416c7265616479206174206d696e206c696d6974000000000000000000000000600082015250565b6000614e2c601483614093565b9150614e3782614df6565b602082019050919050565b60006020820190508181036000830152614e5b81614e1f565b9050919050565b7f436f6e7472616374206973205061757365640000000000000000000000000000600082015250565b6000614e98601283614093565b9150614ea382614e62565b602082019050919050565b60006020820190508181036000830152614ec781614e8b565b9050919050565b7f4d696e74696e6720697320506175736564000000000000000000000000000000600082015250565b6000614f04601183614093565b9150614f0f82614ece565b602082019050919050565b60006020820190508181036000830152614f3381614ef7565b9050919050565b600081905092915050565b6000614f5082614088565b614f5a8185614f3a565b9350614f6a8185602086016140a4565b80840191505092915050565b6000614f828284614f45565b915081905092915050565b7f4d696e74696e67206c696d697420657865656465642100000000000000000000600082015250565b6000614fc3601683614093565b9150614fce82614f8d565b602082019050919050565b60006020820190508181036000830152614ff281614fb6565b9050919050565b6000819050919050565b6000819050919050565b600061502861502361501e84614ff9565b615003565b614143565b9050919050565b6150388161500d565b82525050565b600060808201905061505360008301876141d8565b61506060208301866141d8565b61506d604083018561502f565b61507a606083018461405e565b95945050505050565b7f5072696365206d757374206265206174206c6561737420312077656900000000600082015250565b60006150b9601c83614093565b91506150c482615083565b602082019050919050565b600060208201905081810360008301526150e8816150ac565b9050919050565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b600061514b602483614093565b9150615156826150ef565b604082019050919050565b6000602082019050818103600083015261517a8161513e565b9050919050565b7f416c7265616479204c6973746564210000000000000000000000000000000000600082015250565b60006151b7600f83614093565b91506151c282615181565b602082019050919050565b600060208201905081810360008301526151e6816151aa565b9050919050565b7f4f6e6c79206f776e65722063616e204c697374204974656d2100000000000000600082015250565b6000615223601983614093565b915061522e826151ed565b602082019050919050565b6000602082019050818103600083015261525281615216565b9050919050565b600060808201905061526e60008301876141d8565b61527b60208301866141d8565b6152886040830185614413565b615295606083018461405e565b95945050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006152d4601883614093565b91506152df8261529e565b602082019050919050565b60006020820190508181036000830152615303816152c7565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000615366602983614093565b91506153718261530a565b604082019050919050565b6000602082019050818103600083015261539581615359565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006153d2601f83614093565b91506153dd8261539c565b602082019050919050565b60006020820190508181036000830152615401816153c5565b9050919050565b7f43616e27742077697468647261772c2062616c616e636520697320656d70747960008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b6000615464602183614093565b915061546f82615408565b604082019050919050565b6000602082019050818103600083015261549381615457565b9050919050565b7f4f776e65722063616e742062757920686973204f776e204e6674000000000000600082015250565b60006154d0601a83614093565b91506154db8261549a565b602082019050919050565b600060208201905081810360008301526154ff816154c3565b9050919050565b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520746865207075726368617365602082015250565b6000615562604083614093565b915061556d82615506565b604082019050919050565b6000602082019050818103600083015261559181615555565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006155f4602683614093565b91506155ff82615598565b604082019050919050565b60006020820190508181036000830152615623816155e7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615660602083614093565b915061566b8261562a565b602082019050919050565b6000602082019050818103600083015261568f81615653565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006156f2602583614093565b91506156fd82615696565b604082019050919050565b60006020820190508181036000830152615721816156e5565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000615784602483614093565b915061578f82615728565b604082019050919050565b600060208201905081810360008301526157b381615777565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006157f0602083614093565b91506157fb826157ba565b602082019050919050565b6000602082019050818103600083015261581f816157e3565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061585c601c83614093565b915061586782615826565b602082019050919050565b6000602082019050818103600083015261588b8161584f565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006158ee602e83614093565b91506158f982615892565b604082019050919050565b6000602082019050818103600083015261591d816158e1565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061595a601983614093565b915061596582615924565b602082019050919050565b600060208201905081810360008301526159898161594d565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006159ec603283614093565b91506159f782615990565b604082019050919050565b60006020820190508181036000830152615a1b816159df565b9050919050565b6000615a2e8285614f45565b9150615a3a8284614f45565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000615a6d82615a46565b615a778185615a51565b9350615a878185602086016140a4565b615a90816140d7565b840191505092915050565b6000608082019050615ab060008301876141d8565b615abd60208301866141d8565b615aca6040830185614413565b8181036060830152615adc8184615a62565b905095945050505050565b600081519050615af681613ff9565b92915050565b600060208284031215615b1257615b11613fc3565b5b6000615b2084828501615ae7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615b6382614143565b9150615b6e83614143565b925082615b7e57615b7d615b29565b5b828204905092915050565b6000615b9482614143565b9150615b9f83614143565b925082615baf57615bae615b29565b5b82820690509291505056fea26469706673582212206cb5a36bba81a20c6cc097d768c232b87a448e6179892a28e52f1969231534b864736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 180,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 188,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 192,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 198,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1166,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 123,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1986,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)1628_storage"
      },
      {
        "astId": 1989,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_listItemId",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)1628_storage"
      },
      {
        "astId": 1992,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_itemsSold",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)1628_storage"
      },
      {
        "astId": 1995,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "listingPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1997,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "listingProceeds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2000,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "vipAddresses",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2002,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "mintLimit",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2005,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "revealUri",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 2007,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "publicMint",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 2009,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "paused",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 2011,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "mintPaused",
        "offset": 2,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 2013,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "revealed",
        "offset": 3,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 2018,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "idToMarketItem",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(MarketItem)2045_storage)"
      },
      {
        "astId": 2022,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "sellerProceeds",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2026,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "_audoxos",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 2030,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "isVip",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2034,
        "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
        "label": "mintingLeft",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(MarketItem)2045_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AudoxoMarketplace.MarketItem)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketItem)2045_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1628_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1627,
            "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MarketItem)2045_storage": {
        "encoding": "inplace",
        "label": "struct AudoxoMarketplace.MarketItem",
        "members": [
          {
            "astId": 2036,
            "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2038,
            "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 2040,
            "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 2042,
            "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2044,
            "contract": "contracts/AudoxoMarketplace.sol:AudoxoMarketplace",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}